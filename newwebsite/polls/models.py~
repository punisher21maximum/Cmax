# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django import forms
from django.db import models

# Create your models here.
from django.db import models
from django.utils import timezone
import datetime
#define common max_length for all
lenn=100
#
from django.core.urlresolvers import reverse


'''User model and Profile model 
				1] User model - inbuilt 2] Profile - written
'''

#User model
from django.contrib.auth.models import User
#Profile model

#A common 'owner' class for all the 5 classes -- Book,Novel,Etx,Ebook,Enotes
class Owner_model(models.Model):

	user = models.OneToOneField(User,on_delete=models.CASCADE)
	ph_num=models.CharField("phone number",max_length=lenn,null=True)
	ac_year=models.CharField("academic year",max_length=lenn,null=True)
	branch=models.CharField("branch",max_length=lenn,null=True)
	address=models.CharField(max_length=lenn,null=True)
	dp=models.FileField(upload_to='owner/pdf',blank=True)
	def  get_absolute_url(self):
		return reverse('polls:detail', kwargs={'pk':self.pk})
	def get_fields(self):
		return [(field.name, field.value_to_string(self)) for field in Owner_model._meta.fields]
	

	'''def __str__(self):
        	return self.user.username'''
#1]Book
class Book_model(models.Model):
	
	owner = models.ForeignKey(Owner_model, on_delete=models.CASCADE)
	book_name=models.CharField(max_length=lenn)
	book_image=models.FileField(blank=True)
	pdf = models.FileField(upload_to='book/pdf',blank=True)
	Branch_CHOICES=[('CS','CS'),('Mech','Mech'),('ENTC','ENTC'),('IT','IT'),('CHEM','CHEM'),('ETX','ETX'),('Civil','Civil'),('FY','FY')]
	book_branch=models.CharField(max_length=lenn,choices=Branch_CHOICES,default='CS')

	Subject_CHOICES=[('DS','Data Structures'),('DSGT','Data Structures and Graph Theory'),('AM2','Applied Mathematcs'),('AM1','Applied   		Mechanics'),('EI','Engineering Informatics')]
	book_sub=models.CharField(max_length=lenn,choices=Subject_CHOICES,default='DS')

	Year_CHOICES=[('I','I'),('II','II'),('III','III'),('IV','IV')]
	book_year=models.CharField(max_length=lenn,choices=Year_CHOICES,default='I')

	author=models.CharField(max_length=lenn)

	import datetime
	YEAR_CHOICES = [(r,r) for r in range(1984, datetime.date.today().year+1)]

	edition = models.IntegerField( ('year'), choices=YEAR_CHOICES, default=datetime.datetime.now().year )

	#edition=models.IntegerField()


	sell_price=models.CharField(max_length=lenn)
	rent_price_per_month=models.CharField(max_length=lenn,null=True)
	rent_price_per_week=models.CharField(max_length=lenn,null=True)
	def  get_absolute_url(self):
		return reverse('polls:index')
	
	def __str__(self):
        	return self.book_name
	def get_fields(self):
		return [(field.name, field.value_to_string(self)) for field in Book._meta.fields]
	class Meta:
        	ordering = ('sell_price',)

#2]Etx
class Etx_model(models.Model):
	
	owner = models.ForeignKey(Owner_model, on_delete=models.CASCADE)
	item_name=models.CharField(max_length=lenn,null=True)
	item_image=models.FileField(blank=True)
	Branch_CHOICES=[('CS','CS'),('Mech','Mech'),('ENTC','ENTC'),('IT','IT'),('CHEM','CHEM'),('ETX','ETX'),('Civil','Civil'),('FY','FY')]
	item_branch=models.CharField(max_length=lenn,choices=Branch_CHOICES,null=True,default='CS')

	Subject_CHOICES=[('DS','Data Structures'),('DSGT','Data Structures and Graph Theory'),('AM2','Applied Mathematcs'),('AM1','Applied   		Mechanics'),('EI','Engineering Informatics'),('None','none')]
	item_sub=models.CharField(max_length=lenn,choices=Subject_CHOICES,null=True,default='DS')

	import datetime
	YEAR_CHOICES = [(r,r) for r in range(1984, datetime.date.today().year+1)]
	item_year=models.IntegerField( ('year'), choices=YEAR_CHOICES, default=datetime.datetime.now().year ,null=True)

	manufacturer=models.CharField(max_length=lenn,null=True,default='optional')
	version=models.CharField(max_length=lenn,null=True,default='optional')
	sell_price=models.CharField(max_length=lenn,null=True)
	rent_price_per_month=models.CharField(max_length=lenn,null=True,default='60')
	rent_price_per_week=models.CharField(max_length=lenn,null=True,default='20')
	def __str__(self):
        	return self.item_name
	def get_fields(self):
		return [(field.name, field.value_to_string(self)) for field in Etx._meta.fields]
	def  get_absolute_url(self):
		return reverse('polls:etx_index')
	class Meta:
        	ordering = ('sell_price',)
	

#3]Novel
class Novel_model(models.Model):
	
	owner = models.ForeignKey(Owner_model, on_delete=models.CASCADE)
	novel_name=models.CharField(max_length=lenn)
	novel_image=models.FileField(upload_to='novel/img',blank=True)
	novel_pdf = models.FileField(upload_to='novel/pdf',blank=True)

	Genre_CHOICES=[('action','action'),('fiction','fiction'),('romance','romance'),('comedy','comedy'),('biography','biography'),
	('tragedy','tragedy'),('thriller','thriller'),('classic','classic'),('mystery','mystery'),('children','children'),('None','None')]
	genre=models.CharField(max_length=lenn,choices=Genre_CHOICES,null=True,default='classic')

	author=models.CharField(max_length=lenn,null=True,default='optional')

	import datetime
	Edition_CHOICES = [(r,r) for r in range(1984, datetime.date.today().year+1)]
	edition=models.IntegerField(('year'), choices=Edition_CHOICES, default=datetime.datetime.now().year ,null=True)

	pages=models.CharField(max_length=lenn,null=True,default='250')
	sell_price=models.CharField(max_length=lenn,null=True,default='300')
	rent_price_per_month=models.CharField(max_length=lenn,null=True,default='150')
	rent_price_per_week=models.CharField(max_length=lenn,null=True,default='25')
	def __str__(self):
        	return self.novel_name
	def  get_absolute_url(self):
		return reverse('polls:novel_index')    	
	def get_fields(self):
		return [(field.name, field.value_to_string(self)) for field in Novel._meta.fields]
	class Meta:
        	ordering = ('sell_price',)
#4]Enotes
class Enotes_model(models.Model):
	
	owner = models.ForeignKey(Owner_model, on_delete=models.CASCADE)
	
	enotes_name=models.CharField(max_length=lenn)
	enotes_image=models.FileField(upload_to='enotes/img',blank=True)
	enotes_pdf = models.FileField(upload_to='enotes/pdf',blank=True)

	Branch_CHOICES=[('CS','CS'),('Mech','Mech'),('ENTC','ENTC'),('IT','IT'),('CHEM','CHEM'),('ETX','ETX'),('Civil','Civil'),('FY','FY')]

	Subject_CHOICES=[('DS','Data Structures'),('DSGT','Data Structures and Graph Theory'),('AM2','Applied Mathematcs'),('AM1','Applied Mechanics'),('EI','Engineering Informatics')]

	Year_CHOICES=[('I','I'),('II','II'),('III','III'),('IV','IV')]

	enotes_branch=models.CharField(max_length=lenn,choices=Branch_CHOICES,default='CS')
	enotes_sub=models.CharField(max_length=lenn,choices=Subject_CHOICES,default='DS')
	enotes_year=models.CharField(max_length=lenn,choices=Year_CHOICES,default='I')

	Author_CHOICES=[('uploader','uploader'),('teacher','teacher'),('book','book'),('google_internet','google/internet')]
	enotes_author=models.CharField(max_length=lenn,choices=Author_CHOICES,default='uploader')

	enotes_author_name=models.CharField(max_length=lenn,default=owner)

	enotes_drive_url=models.URLField(max_length=lenn,null=True)
	def __str__(self):
        	return self.enotes_name
	def  get_absolute_url(self):
		return reverse('polls:enotes_index')
	def get_fields(self):
		return [(field.name, field.value_to_string(self)) for field in Enotes._meta.fields]
	#class Meta:
        	#ordering = ('sell_price',)
#5]Ebook
class Ebook_model(models.Model):
	
	owner = models.ForeignKey(Owner_model, on_delete=models.CASCADE)
	ebook_name=models.CharField(max_length=lenn,blank=True)
	ebook_image=models.FileField(upload_to='ebook/img',blank=True)
	ebook_pdf = models.FileField(upload_to='ebook/pdf',blank=True)
	ebook_author=models.CharField(max_length=lenn)

	Branch_CHOICES=[('CS','CS'),('Mech','Mech'),('ENTC','ENTC'),('IT','IT'),('CHEM','CHEM'),('ETX','ETX'),('Civil','Civil'),('FY','FY')]

	Subject_CHOICES=[('DS','Data Structures'),('DSGT','Data Structures and Graph Theory'),('AM2','Applied Mathematcs'),('AM1','Applied Mechanics'),('EI','Engineering Informatics')]

	Year_CHOICES=[('I','I'),('II','II'),('III','III'),('IV','IV')]
	
	ebook_branch=models.CharField(max_length=lenn,choices=Branch_CHOICES,default='CS')
	ebook_sub=models.CharField(max_length=lenn,choices=Subject_CHOICES,default='DS')
	ebook_year=models.CharField(max_length=lenn,choices=Year_CHOICES,default='I')


	import datetime
	Edition_CHOICES = [(r,r) for r in range(1984, datetime.date.today().year+1)]
	ebook_edition=models.IntegerField(('year'), choices=Edition_CHOICES, default=datetime.datetime.now().year ,null=True)
	
	
	ebook_drive_url=models.URLField(max_length=lenn,null=True)


	def __str__(self):
        	return self.book_name
	def  get_absolute_url(self):
		return reverse('polls:ebook_index')
	def get_fields(self):
		return [(field.name, field.value_to_string(self)) for field in Ebook._meta.fields]
	#class Meta:
        	#ordering = ('sell_price',)



	



